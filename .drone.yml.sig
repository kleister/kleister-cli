eyJhbGciOiJIUzI1NiJ9.d29ya3NwYWNlOgogIGJhc2U6IC9zcnYvYXBwCiAgcGF0aDogc3JjL2dpdGh1Yi5jb20va2xlaXN0ZXIva2xlaXN0ZXItY2xpCgpwaXBlbGluZToKICB0ZXN0aW5nOgogICAgaW1hZ2U6IHdlYmhpcHBpZS9nb2xhbmc6ZWRnZQogICAgcHVsbDogdHJ1ZQogICAgZW52aXJvbm1lbnQ6CiAgICAgIENHT19FTkFCTEVEOiAwCiAgICAgIFRBR1M6CiAgICAgIEdPUEFUSDogL3Nydi9hcHAKICAgIGNvbW1hbmRzOgogICAgICAtIG1ha2UgY2xlYW4KICAgICAgLSBtYWtlIHZldAogICAgICAtIG1ha2UgdmFyY2hlY2sKICAgICAgLSBtYWtlIHN0cnVjdGNoZWNrCiAgICAgIC0gbWFrZSB1bnVzZWQKICAgICAgLSBtYWtlIGdvc2ltcGxlCiAgICAgIC0gbWFrZSB1bmNvbnZlcnQKICAgICAgLSBtYWtlIGluZWZmYXNzaWduCiAgICAgIC0gbWFrZSBsaW50CiAgICAgIC0gbWFrZSB0ZXN0CiAgICAgIC0gbWFrZSBidWlsZAoKICB1cGRhdGVyOgogICAgaW1hZ2U6IGthcmFsYWJlL3hnby1sYXRlc3Q6bGF0ZXN0CiAgICBwdWxsOiB0cnVlCiAgICBlbnZpcm9ubWVudDoKICAgICAgQ0dPX0VOQUJMRUQ6IDAKICAgICAgVEFHUzoKICAgICAgR09QQVRIOiAvc3J2L2FwcAogICAgY29tbWFuZHM6CiAgICAgIC0gbWFrZSBwdWJsaXNoCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdXNoLCB0YWcgXQogICAgICBicmFuY2g6IFsgbWFzdGVyLCByZWxlYXNlLyosIHJlZnMvdGFncy8qIF0KCiAgIyBjb3ZlcmFnZToKICAjICAgaW1hZ2U6IHBsdWdpbnMvY292ZXJhZ2UKICAjICAgc2VydmVyOiBodHRwOi8vY292ZXJhZ2UuZHJvbmVoaXBwaWUuZGUKICAjICAgd2hlbjoKICAjICAgICBldmVudDogWyBwdXNoLCB0YWcsIHB1bGxfcmVxdWVzdCBdCgogIGRvY2tlcjoKICAgIGltYWdlOiBwbHVnaW5zL2RvY2tlcgogICAgcmVwbzoga2xlaXN0ZXIva2xlaXN0ZXItY2xpCiAgICB0YWdzOiBbICcke0RST05FX1RBRyMjdn0nIF0KICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHRhZyBdCiAgICAgIGJyYW5jaDogWyByZWZzL3RhZ3MvKiBdCgogIGRvY2tlcjoKICAgIGltYWdlOiBwbHVnaW5zL2RvY2tlcgogICAgcmVwbzoga2xlaXN0ZXIva2xlaXN0ZXItY2xpCiAgICB0YWdzOiBbICcke0RST05FX0JSQU5DSCMjcmVsZWFzZS92fScgXQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCBdCiAgICAgIGJyYW5jaDogWyByZWxlYXNlLyogXQoKICBkb2NrZXI6CiAgICBpbWFnZTogcGx1Z2lucy9kb2NrZXIKICAgIHJlcG86IGtsZWlzdGVyL2tsZWlzdGVyLWNsaQogICAgdGFnczogWyAnbGF0ZXN0JyBdCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdXNoIF0KICAgICAgYnJhbmNoOiBbIG1hc3RlciBdCgogICMgcnN5bmM6CiAgIyAgIGltYWdlOiBwbHVnaW5zL3JzeW5jCiAgIyAgIHVzZXI6IGRlcGxveQogICMgICBob3N0OiBkbC53ZWJoaXBwaWUuZGUKICAjICAgc291cmNlOiBkaXN0L3JlbGVhc2UvCiAgIyAgIHRhcmdldDogL3Vzci9zaGFyZS93ZWJhcHBzL2RsL3B1YmxpY19odG1sL2tsZWlzdGVyLWNsaS8ke0RST05FX1RBRyMjdn0KICAjICAgcmVjdXJzaXZlOiB0cnVlCiAgIyAgIGRlbGV0ZTogdHJ1ZQogICMgICB3aGVuOgogICMgICAgIGV2ZW50OiBbIHRhZyBdCiAgIyAgICAgYnJhbmNoOiBbIHJlZnMvdGFncy8qIF0KCiAgIyByc3luYzoKICAjICAgaW1hZ2U6IHBsdWdpbnMvcnN5bmMKICAjICAgdXNlcjogZGVwbG95CiAgIyAgIGhvc3Q6IGRsLndlYmhpcHBpZS5kZQogICMgICBzb3VyY2U6IGRpc3QvcmVsZWFzZS8KICAjICAgdGFyZ2V0OiAvdXNyL3NoYXJlL3dlYmFwcHMvZGwvcHVibGljX2h0bWwva2xlaXN0ZXItY2xpLyR7RFJPTkVfVEFHIyNyZWxlYXNlL3Z9CiAgIyAgIHJlY3Vyc2l2ZTogdHJ1ZQogICMgICBkZWxldGU6IHRydWUKICAjICAgd2hlbjoKICAjICAgICBldmVudDogWyBwdXNoIF0KICAjICAgICBicmFuY2g6IFsgcmVsZWFzZS8qIF0KCiAgIyByc3luYzoKICAjICAgaW1hZ2U6IHBsdWdpbnMvcnN5bmMKICAjICAgdXNlcjogZGVwbG95CiAgIyAgIGhvc3Q6IGRsLndlYmhpcHBpZS5kZQogICMgICBzb3VyY2U6IGRpc3QvcmVsZWFzZS8KICAjICAgdGFyZ2V0OiAvdXNyL3NoYXJlL3dlYmFwcHMvZGwvcHVibGljX2h0bWwva2xlaXN0ZXItY2xpL21hc3RlcgogICMgICByZWN1cnNpdmU6IHRydWUKICAjICAgZGVsZXRlOiB0cnVlCiAgIyAgIHdoZW46CiAgIyAgICAgZXZlbnQ6IHB1c2gKICAjICAgICBicmFuY2g6IG1hc3RlcgoKICBnaXRodWI6CiAgICBpbWFnZTogcGx1Z2lucy9naXRodWItcmVsZWFzZQogICAgZmlsZXM6CiAgICAgIC0gZGlzdC9yZWxlYXNlLyoKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHRhZyBdCiAgICAgIGJyYW5jaDogWyByZWZzL3RhZ3MvKiBdCgogIGdpdHRlcjoKICAgIGltYWdlOiBwbHVnaW5zL2dpdHRlcgo.njfFShNDmaUZL9PXOellyE4nkZUOkNcKF0_UefnfZgM