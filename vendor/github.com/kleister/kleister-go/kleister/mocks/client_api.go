package mocks

import http "net/http"
import kleister "github.com/kleister/kleister-go/kleister"
import mock "github.com/stretchr/testify/mock"

// ClientAPI is an autogenerated mock type for the ClientAPI type
type ClientAPI struct {
	mock.Mock
}

// AuthLogin provides a mock function with given fields: _a0, _a1
func (_m *ClientAPI) AuthLogin(_a0 string, _a1 string) (*kleister.Token, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *kleister.Token
	if rf, ok := ret.Get(0).(func(string, string) *kleister.Token); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildDelete provides a mock function with given fields: _a0, _a1
func (_m *ClientAPI) BuildDelete(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BuildGet provides a mock function with given fields: _a0, _a1
func (_m *ClientAPI) BuildGet(_a0 string, _a1 string) (*kleister.Build, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *kleister.Build
	if rf, ok := ret.Get(0).(func(string, string) *kleister.Build); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Build)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildList provides a mock function with given fields: _a0
func (_m *ClientAPI) BuildList(_a0 string) ([]*kleister.Build, error) {
	ret := _m.Called(_a0)

	var r0 []*kleister.Build
	if rf, ok := ret.Get(0).(func(string) []*kleister.Build); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.Build)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildPatch provides a mock function with given fields: _a0, _a1
func (_m *ClientAPI) BuildPatch(_a0 string, _a1 *kleister.Build) (*kleister.Build, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *kleister.Build
	if rf, ok := ret.Get(0).(func(string, *kleister.Build) *kleister.Build); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Build)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *kleister.Build) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildPost provides a mock function with given fields: _a0, _a1
func (_m *ClientAPI) BuildPost(_a0 string, _a1 *kleister.Build) (*kleister.Build, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *kleister.Build
	if rf, ok := ret.Get(0).(func(string, *kleister.Build) *kleister.Build); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Build)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *kleister.Build) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildVersionAppend provides a mock function with given fields: _a0
func (_m *ClientAPI) BuildVersionAppend(_a0 kleister.BuildVersionParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.BuildVersionParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BuildVersionDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) BuildVersionDelete(_a0 kleister.BuildVersionParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.BuildVersionParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BuildVersionList provides a mock function with given fields: _a0
func (_m *ClientAPI) BuildVersionList(_a0 kleister.BuildVersionParams) ([]*kleister.BuildVersion, error) {
	ret := _m.Called(_a0)

	var r0 []*kleister.BuildVersion
	if rf, ok := ret.Get(0).(func(kleister.BuildVersionParams) []*kleister.BuildVersion); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.BuildVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kleister.BuildVersionParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) ClientDelete(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientGet provides a mock function with given fields: _a0
func (_m *ClientAPI) ClientGet(_a0 string) (*kleister.Client, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.Client
	if rf, ok := ret.Get(0).(func(string) *kleister.Client); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientList provides a mock function with given fields:
func (_m *ClientAPI) ClientList() ([]*kleister.Client, error) {
	ret := _m.Called()

	var r0 []*kleister.Client
	if rf, ok := ret.Get(0).(func() []*kleister.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientPackAppend provides a mock function with given fields: _a0
func (_m *ClientAPI) ClientPackAppend(_a0 kleister.ClientPackParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.ClientPackParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientPackDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) ClientPackDelete(_a0 kleister.ClientPackParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.ClientPackParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientPackList provides a mock function with given fields: _a0
func (_m *ClientAPI) ClientPackList(_a0 kleister.ClientPackParams) ([]*kleister.ClientPack, error) {
	ret := _m.Called(_a0)

	var r0 []*kleister.ClientPack
	if rf, ok := ret.Get(0).(func(kleister.ClientPackParams) []*kleister.ClientPack); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.ClientPack)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kleister.ClientPackParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientPatch provides a mock function with given fields: _a0
func (_m *ClientAPI) ClientPatch(_a0 *kleister.Client) (*kleister.Client, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.Client
	if rf, ok := ret.Get(0).(func(*kleister.Client) *kleister.Client); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kleister.Client) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientPost provides a mock function with given fields: _a0
func (_m *ClientAPI) ClientPost(_a0 *kleister.Client) (*kleister.Client, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.Client
	if rf, ok := ret.Get(0).(func(*kleister.Client) *kleister.Client); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Client)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kleister.Client) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForgeBuildAppend provides a mock function with given fields: _a0
func (_m *ClientAPI) ForgeBuildAppend(_a0 kleister.ForgeBuildParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.ForgeBuildParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForgeBuildDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) ForgeBuildDelete(_a0 kleister.ForgeBuildParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.ForgeBuildParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ForgeBuildList provides a mock function with given fields: _a0
func (_m *ClientAPI) ForgeBuildList(_a0 kleister.ForgeBuildParams) ([]*kleister.Build, error) {
	ret := _m.Called(_a0)

	var r0 []*kleister.Build
	if rf, ok := ret.Get(0).(func(kleister.ForgeBuildParams) []*kleister.Build); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.Build)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kleister.ForgeBuildParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForgeGet provides a mock function with given fields: _a0
func (_m *ClientAPI) ForgeGet(_a0 string) (*kleister.Forge, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.Forge
	if rf, ok := ret.Get(0).(func(string) *kleister.Forge); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Forge)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForgeList provides a mock function with given fields:
func (_m *ClientAPI) ForgeList() ([]*kleister.Forge, error) {
	ret := _m.Called()

	var r0 []*kleister.Forge
	if rf, ok := ret.Get(0).(func() []*kleister.Forge); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.Forge)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ForgeRefresh provides a mock function with given fields:
func (_m *ClientAPI) ForgeRefresh() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsAuthenticated provides a mock function with given fields:
func (_m *ClientAPI) IsAuthenticated() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// KeyDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) KeyDelete(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KeyGet provides a mock function with given fields: _a0
func (_m *ClientAPI) KeyGet(_a0 string) (*kleister.Key, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.Key
	if rf, ok := ret.Get(0).(func(string) *kleister.Key); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyList provides a mock function with given fields:
func (_m *ClientAPI) KeyList() ([]*kleister.Key, error) {
	ret := _m.Called()

	var r0 []*kleister.Key
	if rf, ok := ret.Get(0).(func() []*kleister.Key); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyPatch provides a mock function with given fields: _a0
func (_m *ClientAPI) KeyPatch(_a0 *kleister.Key) (*kleister.Key, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.Key
	if rf, ok := ret.Get(0).(func(*kleister.Key) *kleister.Key); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kleister.Key) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// KeyPost provides a mock function with given fields: _a0
func (_m *ClientAPI) KeyPost(_a0 *kleister.Key) (*kleister.Key, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.Key
	if rf, ok := ret.Get(0).(func(*kleister.Key) *kleister.Key); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Key)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kleister.Key) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MinecraftBuildAppend provides a mock function with given fields: _a0
func (_m *ClientAPI) MinecraftBuildAppend(_a0 kleister.MinecraftBuildParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.MinecraftBuildParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MinecraftBuildDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) MinecraftBuildDelete(_a0 kleister.MinecraftBuildParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.MinecraftBuildParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MinecraftBuildList provides a mock function with given fields: _a0
func (_m *ClientAPI) MinecraftBuildList(_a0 kleister.MinecraftBuildParams) ([]*kleister.Build, error) {
	ret := _m.Called(_a0)

	var r0 []*kleister.Build
	if rf, ok := ret.Get(0).(func(kleister.MinecraftBuildParams) []*kleister.Build); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.Build)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kleister.MinecraftBuildParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MinecraftGet provides a mock function with given fields: _a0
func (_m *ClientAPI) MinecraftGet(_a0 string) (*kleister.Minecraft, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.Minecraft
	if rf, ok := ret.Get(0).(func(string) *kleister.Minecraft); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Minecraft)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MinecraftList provides a mock function with given fields:
func (_m *ClientAPI) MinecraftList() ([]*kleister.Minecraft, error) {
	ret := _m.Called()

	var r0 []*kleister.Minecraft
	if rf, ok := ret.Get(0).(func() []*kleister.Minecraft); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.Minecraft)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MinecraftRefresh provides a mock function with given fields:
func (_m *ClientAPI) MinecraftRefresh() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) ModDelete(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModGet provides a mock function with given fields: _a0
func (_m *ClientAPI) ModGet(_a0 string) (*kleister.Mod, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.Mod
	if rf, ok := ret.Get(0).(func(string) *kleister.Mod); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Mod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModList provides a mock function with given fields:
func (_m *ClientAPI) ModList() ([]*kleister.Mod, error) {
	ret := _m.Called()

	var r0 []*kleister.Mod
	if rf, ok := ret.Get(0).(func() []*kleister.Mod); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.Mod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModPatch provides a mock function with given fields: _a0
func (_m *ClientAPI) ModPatch(_a0 *kleister.Mod) (*kleister.Mod, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.Mod
	if rf, ok := ret.Get(0).(func(*kleister.Mod) *kleister.Mod); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Mod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kleister.Mod) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModPost provides a mock function with given fields: _a0
func (_m *ClientAPI) ModPost(_a0 *kleister.Mod) (*kleister.Mod, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.Mod
	if rf, ok := ret.Get(0).(func(*kleister.Mod) *kleister.Mod); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Mod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kleister.Mod) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModTeamAppend provides a mock function with given fields: _a0
func (_m *ClientAPI) ModTeamAppend(_a0 kleister.ModTeamParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.ModTeamParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModTeamDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) ModTeamDelete(_a0 kleister.ModTeamParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.ModTeamParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModTeamList provides a mock function with given fields: _a0
func (_m *ClientAPI) ModTeamList(_a0 kleister.ModTeamParams) ([]*kleister.TeamMod, error) {
	ret := _m.Called(_a0)

	var r0 []*kleister.TeamMod
	if rf, ok := ret.Get(0).(func(kleister.ModTeamParams) []*kleister.TeamMod); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.TeamMod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kleister.ModTeamParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModTeamPerm provides a mock function with given fields: _a0
func (_m *ClientAPI) ModTeamPerm(_a0 kleister.ModTeamParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.ModTeamParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModUserAppend provides a mock function with given fields: _a0
func (_m *ClientAPI) ModUserAppend(_a0 kleister.ModUserParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.ModUserParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModUserDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) ModUserDelete(_a0 kleister.ModUserParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.ModUserParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModUserList provides a mock function with given fields: _a0
func (_m *ClientAPI) ModUserList(_a0 kleister.ModUserParams) ([]*kleister.UserMod, error) {
	ret := _m.Called(_a0)

	var r0 []*kleister.UserMod
	if rf, ok := ret.Get(0).(func(kleister.ModUserParams) []*kleister.UserMod); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.UserMod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kleister.ModUserParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModUserPerm provides a mock function with given fields: _a0
func (_m *ClientAPI) ModUserPerm(_a0 kleister.ModUserParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.ModUserParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PackClientAppend provides a mock function with given fields: _a0
func (_m *ClientAPI) PackClientAppend(_a0 kleister.PackClientParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.PackClientParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PackClientDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) PackClientDelete(_a0 kleister.PackClientParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.PackClientParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PackClientList provides a mock function with given fields: _a0
func (_m *ClientAPI) PackClientList(_a0 kleister.PackClientParams) ([]*kleister.ClientPack, error) {
	ret := _m.Called(_a0)

	var r0 []*kleister.ClientPack
	if rf, ok := ret.Get(0).(func(kleister.PackClientParams) []*kleister.ClientPack); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.ClientPack)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kleister.PackClientParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PackDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) PackDelete(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PackGet provides a mock function with given fields: _a0
func (_m *ClientAPI) PackGet(_a0 string) (*kleister.Pack, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.Pack
	if rf, ok := ret.Get(0).(func(string) *kleister.Pack); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Pack)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PackList provides a mock function with given fields:
func (_m *ClientAPI) PackList() ([]*kleister.Pack, error) {
	ret := _m.Called()

	var r0 []*kleister.Pack
	if rf, ok := ret.Get(0).(func() []*kleister.Pack); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.Pack)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PackPatch provides a mock function with given fields: _a0
func (_m *ClientAPI) PackPatch(_a0 *kleister.Pack) (*kleister.Pack, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.Pack
	if rf, ok := ret.Get(0).(func(*kleister.Pack) *kleister.Pack); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Pack)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kleister.Pack) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PackPost provides a mock function with given fields: _a0
func (_m *ClientAPI) PackPost(_a0 *kleister.Pack) (*kleister.Pack, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.Pack
	if rf, ok := ret.Get(0).(func(*kleister.Pack) *kleister.Pack); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Pack)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kleister.Pack) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PackTeamAppend provides a mock function with given fields: _a0
func (_m *ClientAPI) PackTeamAppend(_a0 kleister.PackTeamParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.PackTeamParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PackTeamDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) PackTeamDelete(_a0 kleister.PackTeamParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.PackTeamParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PackTeamList provides a mock function with given fields: _a0
func (_m *ClientAPI) PackTeamList(_a0 kleister.PackTeamParams) ([]*kleister.TeamPack, error) {
	ret := _m.Called(_a0)

	var r0 []*kleister.TeamPack
	if rf, ok := ret.Get(0).(func(kleister.PackTeamParams) []*kleister.TeamPack); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.TeamPack)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kleister.PackTeamParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PackTeamPerm provides a mock function with given fields: _a0
func (_m *ClientAPI) PackTeamPerm(_a0 kleister.PackTeamParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.PackTeamParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PackUserAppend provides a mock function with given fields: _a0
func (_m *ClientAPI) PackUserAppend(_a0 kleister.PackUserParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.PackUserParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PackUserDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) PackUserDelete(_a0 kleister.PackUserParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.PackUserParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PackUserList provides a mock function with given fields: _a0
func (_m *ClientAPI) PackUserList(_a0 kleister.PackUserParams) ([]*kleister.UserPack, error) {
	ret := _m.Called(_a0)

	var r0 []*kleister.UserPack
	if rf, ok := ret.Get(0).(func(kleister.PackUserParams) []*kleister.UserPack); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.UserPack)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kleister.PackUserParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PackUserPerm provides a mock function with given fields: _a0
func (_m *ClientAPI) PackUserPerm(_a0 kleister.PackUserParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.PackUserParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProfileGet provides a mock function with given fields:
func (_m *ClientAPI) ProfileGet() (*kleister.Profile, error) {
	ret := _m.Called()

	var r0 *kleister.Profile
	if rf, ok := ret.Get(0).(func() *kleister.Profile); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfilePatch provides a mock function with given fields: _a0
func (_m *ClientAPI) ProfilePatch(_a0 *kleister.Profile) (*kleister.Profile, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.Profile
	if rf, ok := ret.Get(0).(func(*kleister.Profile) *kleister.Profile); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Profile)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kleister.Profile) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProfileToken provides a mock function with given fields:
func (_m *ClientAPI) ProfileToken() (*kleister.Token, error) {
	ret := _m.Called()

	var r0 *kleister.Token
	if rf, ok := ret.Get(0).(func() *kleister.Token); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Token)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetClient provides a mock function with given fields: client
func (_m *ClientAPI) SetClient(client *http.Client) {
	_m.Called(client)
}

// TeamDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamDelete(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeamGet provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamGet(_a0 string) (*kleister.Team, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.Team
	if rf, ok := ret.Get(0).(func(string) *kleister.Team); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamList provides a mock function with given fields:
func (_m *ClientAPI) TeamList() ([]*kleister.Team, error) {
	ret := _m.Called()

	var r0 []*kleister.Team
	if rf, ok := ret.Get(0).(func() []*kleister.Team); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamModAppend provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamModAppend(_a0 kleister.TeamModParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.TeamModParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeamModDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamModDelete(_a0 kleister.TeamModParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.TeamModParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeamModList provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamModList(_a0 kleister.TeamModParams) ([]*kleister.TeamMod, error) {
	ret := _m.Called(_a0)

	var r0 []*kleister.TeamMod
	if rf, ok := ret.Get(0).(func(kleister.TeamModParams) []*kleister.TeamMod); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.TeamMod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kleister.TeamModParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamModPerm provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamModPerm(_a0 kleister.TeamModParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.TeamModParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeamPackAppend provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamPackAppend(_a0 kleister.TeamPackParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.TeamPackParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeamPackDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamPackDelete(_a0 kleister.TeamPackParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.TeamPackParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeamPackList provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamPackList(_a0 kleister.TeamPackParams) ([]*kleister.TeamPack, error) {
	ret := _m.Called(_a0)

	var r0 []*kleister.TeamPack
	if rf, ok := ret.Get(0).(func(kleister.TeamPackParams) []*kleister.TeamPack); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.TeamPack)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kleister.TeamPackParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamPackPerm provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamPackPerm(_a0 kleister.TeamPackParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.TeamPackParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeamPatch provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamPatch(_a0 *kleister.Team) (*kleister.Team, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.Team
	if rf, ok := ret.Get(0).(func(*kleister.Team) *kleister.Team); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kleister.Team) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamPost provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamPost(_a0 *kleister.Team) (*kleister.Team, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.Team
	if rf, ok := ret.Get(0).(func(*kleister.Team) *kleister.Team); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kleister.Team) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamUserAppend provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamUserAppend(_a0 kleister.TeamUserParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.TeamUserParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeamUserDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamUserDelete(_a0 kleister.TeamUserParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.TeamUserParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TeamUserList provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamUserList(_a0 kleister.TeamUserParams) ([]*kleister.TeamUser, error) {
	ret := _m.Called(_a0)

	var r0 []*kleister.TeamUser
	if rf, ok := ret.Get(0).(func(kleister.TeamUserParams) []*kleister.TeamUser); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.TeamUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kleister.TeamUserParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TeamUserPerm provides a mock function with given fields: _a0
func (_m *ClientAPI) TeamUserPerm(_a0 kleister.TeamUserParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.TeamUserParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) UserDelete(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserGet provides a mock function with given fields: _a0
func (_m *ClientAPI) UserGet(_a0 string) (*kleister.User, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.User
	if rf, ok := ret.Get(0).(func(string) *kleister.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserList provides a mock function with given fields:
func (_m *ClientAPI) UserList() ([]*kleister.User, error) {
	ret := _m.Called()

	var r0 []*kleister.User
	if rf, ok := ret.Get(0).(func() []*kleister.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserModAppend provides a mock function with given fields: _a0
func (_m *ClientAPI) UserModAppend(_a0 kleister.UserModParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.UserModParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserModDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) UserModDelete(_a0 kleister.UserModParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.UserModParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserModList provides a mock function with given fields: _a0
func (_m *ClientAPI) UserModList(_a0 kleister.UserModParams) ([]*kleister.UserMod, error) {
	ret := _m.Called(_a0)

	var r0 []*kleister.UserMod
	if rf, ok := ret.Get(0).(func(kleister.UserModParams) []*kleister.UserMod); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.UserMod)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kleister.UserModParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserModPerm provides a mock function with given fields: _a0
func (_m *ClientAPI) UserModPerm(_a0 kleister.UserModParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.UserModParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserPackAppend provides a mock function with given fields: _a0
func (_m *ClientAPI) UserPackAppend(_a0 kleister.UserPackParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.UserPackParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserPackDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) UserPackDelete(_a0 kleister.UserPackParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.UserPackParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserPackList provides a mock function with given fields: _a0
func (_m *ClientAPI) UserPackList(_a0 kleister.UserPackParams) ([]*kleister.UserPack, error) {
	ret := _m.Called(_a0)

	var r0 []*kleister.UserPack
	if rf, ok := ret.Get(0).(func(kleister.UserPackParams) []*kleister.UserPack); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.UserPack)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kleister.UserPackParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserPackPerm provides a mock function with given fields: _a0
func (_m *ClientAPI) UserPackPerm(_a0 kleister.UserPackParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.UserPackParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserPatch provides a mock function with given fields: _a0
func (_m *ClientAPI) UserPatch(_a0 *kleister.User) (*kleister.User, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.User
	if rf, ok := ret.Get(0).(func(*kleister.User) *kleister.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kleister.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserPost provides a mock function with given fields: _a0
func (_m *ClientAPI) UserPost(_a0 *kleister.User) (*kleister.User, error) {
	ret := _m.Called(_a0)

	var r0 *kleister.User
	if rf, ok := ret.Get(0).(func(*kleister.User) *kleister.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*kleister.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserTeamAppend provides a mock function with given fields: _a0
func (_m *ClientAPI) UserTeamAppend(_a0 kleister.UserTeamParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.UserTeamParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserTeamDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) UserTeamDelete(_a0 kleister.UserTeamParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.UserTeamParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserTeamList provides a mock function with given fields: _a0
func (_m *ClientAPI) UserTeamList(_a0 kleister.UserTeamParams) ([]*kleister.TeamUser, error) {
	ret := _m.Called(_a0)

	var r0 []*kleister.TeamUser
	if rf, ok := ret.Get(0).(func(kleister.UserTeamParams) []*kleister.TeamUser); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.TeamUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kleister.UserTeamParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserTeamPerm provides a mock function with given fields: _a0
func (_m *ClientAPI) UserTeamPerm(_a0 kleister.UserTeamParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.UserTeamParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VersionBuildAppend provides a mock function with given fields: _a0
func (_m *ClientAPI) VersionBuildAppend(_a0 kleister.VersionBuildParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.VersionBuildParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VersionBuildDelete provides a mock function with given fields: _a0
func (_m *ClientAPI) VersionBuildDelete(_a0 kleister.VersionBuildParams) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(kleister.VersionBuildParams) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VersionBuildList provides a mock function with given fields: _a0
func (_m *ClientAPI) VersionBuildList(_a0 kleister.VersionBuildParams) ([]*kleister.BuildVersion, error) {
	ret := _m.Called(_a0)

	var r0 []*kleister.BuildVersion
	if rf, ok := ret.Get(0).(func(kleister.VersionBuildParams) []*kleister.BuildVersion); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.BuildVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(kleister.VersionBuildParams) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VersionDelete provides a mock function with given fields: _a0, _a1
func (_m *ClientAPI) VersionDelete(_a0 string, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// VersionGet provides a mock function with given fields: _a0, _a1
func (_m *ClientAPI) VersionGet(_a0 string, _a1 string) (*kleister.Version, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *kleister.Version
	if rf, ok := ret.Get(0).(func(string, string) *kleister.Version); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Version)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VersionList provides a mock function with given fields: _a0
func (_m *ClientAPI) VersionList(_a0 string) ([]*kleister.Version, error) {
	ret := _m.Called(_a0)

	var r0 []*kleister.Version
	if rf, ok := ret.Get(0).(func(string) []*kleister.Version); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*kleister.Version)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VersionPatch provides a mock function with given fields: _a0, _a1
func (_m *ClientAPI) VersionPatch(_a0 string, _a1 *kleister.Version) (*kleister.Version, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *kleister.Version
	if rf, ok := ret.Get(0).(func(string, *kleister.Version) *kleister.Version); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Version)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *kleister.Version) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VersionPost provides a mock function with given fields: _a0, _a1
func (_m *ClientAPI) VersionPost(_a0 string, _a1 *kleister.Version) (*kleister.Version, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *kleister.Version
	if rf, ok := ret.Get(0).(func(string, *kleister.Version) *kleister.Version); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kleister.Version)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *kleister.Version) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

var _ kleister.ClientAPI = (*ClientAPI)(nil)
